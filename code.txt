parse[text_String] := 
 Module[{output, 
   json = ImportString[Last@StringSplit[text, "\r\n"], "RawJSON"]},
  
  If[MissingQ@json["data"], json["data"] = <||>];
  
  (* remove underscore in variable names in script *)
  json["script"] = 
   StringReplace[json["script"], 
    Normal@AssociationMap[StringReplace[#, "_" -> ""] &, 
      Keys@json["data"]]];
  
  (* remove underscore in variable names *)
  json["data"] = KeyMap[StringReplace[#, "_" -> ""] &, json["data"]];
  
  output = 
   ToExpression[
    StringRiffle[#, {"With[{", ",", "},"}, "="] &@(List @@@ 
        Normal@json["data"]) <> json["script"] <> "]"];
  
  Return[output];
  ]


listener = SocketListen[20504, Function[{assoc},
    Module[{client = assoc["SourceSocket"], imgData, output, data, 
      evalData},
     
     (* print each request *)
     Print[assoc];
     
     If[StringStartsQ[assoc["Data"], "POST /evaluate"],
      
      (* evaluate script *)
      evalData = EvaluationData[data = parse@assoc["Data"];];
      
      (* check whether the evaluation was successful *)
      If[Not@evalData["Success"], 
       data = StringRiffle[#, "\n"] &@
         DeleteDuplicates@evalData["MessagesText"]];
      ];
     
     imgData = 
      StringReplace[#, "\n" -> ""] &@
       ExportString[
        Rasterize[data, RasterSize -> 600], {"Base64", "PNG"}];
     
     output = "HTTP/1.1 200 OK" <>
       "\r\nServer: Mathematica/" <> ToString@$VersionNumber <>
       "\r\nContent-Type: text/image; charset=utf-8" <>
       "\r\nDate: " <> DateString[TimeZone -> 0] <> " GMT" <>
       "\r\nContent-Length: " <> ToString@StringLength@imgData <>
       "\r\nVary: Accept-Encoding\r\n\r\n" <> imgData;
     
     WriteString[client, output];
     
     ]]];
